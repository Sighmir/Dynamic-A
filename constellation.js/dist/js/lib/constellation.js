// Constellation.js 0.2.0
// (c) 2011-2013 Greg MacWilliam
// Freely distributed under the MIT license
// Docs: https://github.com/gmac/constellation.js

(function(e,t){var n=t(Math.sqrt,Math.min,Math.max,Math.abs);"undefined"!=typeof exports?module.exports=n:"function"==typeof define&&define.amd?define(n):e.Const=n})(this,function(e,t,n,r){function i(e){return e instanceof Array}function s(e){return"function"==typeof e}function o(e){return Array.prototype.slice.call(e)}function u(e,t,n,r){return e===n&&t===r||e===r&&t===n}function a(e,t,n,r,i){if(r.length&&i.length){for(var s=0;r.length>s;s++)if(h.contains(i,r[s]))return!0;var o=e.getAdjacentPolygonSegments(r,i);for(s=0;o.length>s;s++){var u=h.map(o[s],e.getNodeById,e);if(c.intersect(t,n,u[0],u[1]))return!0}}return!1}function f(e,t,n){var r=e.addNode(t.x,t.y,{});if(!n.length){var i=e.snapPointToGrid(t);if(i.point){r.x=i.point.x,r.y=i.point.y,r.snap=i;for(var s=0,o=i.segment.length;o>s;s++)e.joinNodes(r.id,i.segment[s]);n=e.getPolygonsWithLineSegment(i.segment[0],i.segment[1])}}return n.length&&(r.poly=n,h.each(n,function(t){for(var n=e.getPolygonById(t).nodes,i=0,s=n.length;s>i;i++)e.joinNodes(r.id,n[i])})),r}function l(e,t){if(e.snap&&t.snap){var n=e.snap.segment,r=t.snap.segment;if(u(n[0],n[1],r[0],r[1]))return!0}if(e.poly&&t.poly)for(var i in e.poly)if(h.contains(t.poly,e.poly[i]))return!0;return!1}var c={},h=c.utils={size:function(e){if(i(e))return e.length;var t=0;for(var n in e)e.hasOwnProperty(n)&&t++;return t},contains:function(e,t){if(i(e)){if(s(Array.prototype.indexOf))return e.indexOf(t)>=0;for(var n=e.length,r=0;n>r;)if(e[r++]===t)return!0}return e&&e.hasOwnProperty(t)},each:function(e,t,n){var r=0;if(i(e))for(var s=e.length;s>r;)t.call(n,e[r],r++);else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r);return e},map:function(e,t,n){var r=0;if(i(e))for(var s=e.length;s>r;)e[r]=t.call(n,e[r],r++);else for(r in e)e.hasOwnProperty(r)&&(e[r]=t.call(n,e[r],r));return e},all:function(e,t,n){for(var r=e.length,i=0;r>i;)if(!t.call(n,e[i],i++))return!1;return!0},toArray:function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t}},p=c.Point=function(e,t){this.x=e||0,this.y=t||0},d=c.Rect=function(e,t,n,r){this.x=e||0,this.y=t||0,this.width=n||0,this.height=r||0};c.distance=function(t,n){var r=n.x-t.x,i=n.y-t.y;return e(r*r+i*i)},c.ccw=function(e,t,n,r){return r?(n.y-e.y)*(t.x-e.x)>(t.y-e.y)*(n.x-e.x):(n.y-e.y)*(t.x-e.x)>=(t.y-e.y)*(n.x-e.x)},c.intersect=function(e,t,n,r){return c.ccw(e,n,r)!==c.ccw(t,n,r)&&c.ccw(e,t,n)!==c.ccw(e,t,r)},c.degreesToRadians=function(e){return e*Math.PI/180},c.radiansToDegrees=function(e){return 180*e/Math.PI},c.angleRadians=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},c.angleDegrees=function(e,t){var n=c.radiansToDegrees(c.angleRadians(e,t));return 0>n?n+360:n},c.angleSector=function(e,t,n){var r=2*Math.PI;return t=t||8,n=n||r/(2*t),0>e&&(e=r+e),e+=n,e>r&&(e-=r),Math.floor(e/(r/t))},c.getRectForPointRing=function(e){var r=e[0],i=r.x,s=r.x,o=r.y,u=r.y;return h.each(e,function(e){i=t(i,e.x),s=n(s,e.x),o=t(o,e.y),u=n(u,e.y)}),new d(i,o,s-i,u-o)},c.hitTestRect=function(e,r){var i=t(r.x,r.x+r.width),s=n(r.x,r.x+r.width),o=t(r.y,r.y+r.height),u=n(r.y,r.y+r.height);return e.x>=i&&e.y>=o&&s>=e.x&&u>=e.y},c.hitTestPointRing=function(e,n){for(var r=new p(0,e.y),i=0,s=0,o=n.length;o>s;s++){var u=n[s],a=n[(s+1)%o];r.x=t(r.x,t(u.x,a.x)-1),i+=this.intersect(r,e,u,a)?1:0}return i%2>0},c.snapPointToLineSegment=function(e,t,n){var r=e.x-t.x,i=e.y-t.y,s=n.x-t.x,o=n.y-t.y,u=s*s+o*o,a=r*s+i*o,f=a/u;return 0>f?new p(t.x,t.y):f>1?new p(n.x,n.y):new p(t.x+s*f,t.y+o*f)},c.getNearestPointToPoint=function(e,t){var n,i,s=null,o=1/0,u=t.length-1;for(t.sort(function(t,n){return t=r(e.x-t.x),n=r(e.x-n.x),n-t});u>=0&&(n=t[u--],o>r(e.x-n.x));)i=c.distance(e,n),o>i&&(s=n,o=i);return s};var v=c.Node=function(e,t,n,r,i){this.id=e,this.x=t||0,this.y=n||0,this.to=i||{},this.data=r||null};v.prototype={toPoint:function(){return{x:this.x,y:this.y,data:this.data||null}}};var m=c.Polygon=function(e,t,n){this.id=e,this.nodes=t.slice(),this.data=n||null},g=c.Path=function(e,t,n){this.nodes=e||[],this.weight=t||0,this.estimate=n||0};g.prototype={copy:function(e,t){return new g(this.nodes.slice(),e||this.weight,t||this.estimate)},last:function(){return this.nodes[this.nodes.length-1]},contains:function(e){return h.contains(e)},prioratize:function(e,t){return t.estimate-e.estimate}};var y=c.Grid=function(e){this.reset(e)};return y.prototype={nodes:{},polys:{},_i:0,toJSON:function(){return{nodes:this.nodes,polys:this.polys,i:this._i}},reset:function(e){this.nodes={},this.polys={},this._i=0,e&&(this._i=e.i||0,h.each(e.nodes||{},function(e){this.nodes[e.id]=e},this),h.each(e.polys||{},function(e){this.polys[e.id]=e},this))},addNode:function(e,t,n){"object"==typeof e&&(n=e,e=0);var r=new v(n&&n.id||"n"+this._i++,e,t,n);return this.nodes[r.id]=r,r},getNodeById:function(e){return this.nodes.hasOwnProperty(e)?this.nodes[e]:null},getNodes:function(e,t){return(!i(e)||t)&&(e=o(arguments)),h.map(e.slice(),function(e){return this.getNodeById(e)},this)},getNumNodes:function(){return h.size(this.nodes)},hasNodes:function(e,t){return(!i(e)||t)&&(e=o(arguments)),h.all(e,function(e){return this.nodes.hasOwnProperty(e)},this)},joinNodes:function(e,t){(!i(e)||t)&&(e=o(arguments));var n=!1;return e.length>1&&this.hasNodes(e)&&h.each(e,function(t){for(var r=this.nodes[t],i=e.length,s=0;i>s;)t=e[s++],t!==r.id&&(r.to[t]=1,n=!0)},this),n},splitNodes:function(e,t){if((!i(e)||t)&&(e=o(arguments)),2>e.length)return this.detachNodes(e);var n=!1;return h.each(e,function(t){var r=this.nodes[t];if(r&&r.to)for(t in r.to)h.contains(e,t)&&(delete r.to[t],n=!0)},this),n},detachNodes:function(e,t){(!i(e)||t)&&(e=o(arguments));var n=!1;return h.each(e,function(e){var t,r,i=this.nodes[e];if(i&&i.to){for(r in i.to)delete i.to[r],t=this.nodes[r],t&&t.to&&delete t.to[e];n=!0}},this),n},removeNodes:function(e,t){(!i(e)||t)&&(e=o(arguments));var n=this.detachNodes(e);return h.each(e,function(e){var t,r;if(this.nodes.hasOwnProperty(e)){delete this.nodes[e];for(r in this.polys)t=this.polys[r],t&&h.contains(t.nodes,e)&&delete this.polys[r];n=!0}},this),n},addPolygon:function(e,t){if(e.length>=3&&this.hasNodes(e)){var n=new m("p"+this._i++,e,t);return this.polys[n.id]=n,n}return null},getPolygonById:function(e){return this.polys.hasOwnProperty(e)?this.polys[e]:null},getPolygons:function(e,t){return(!i(e)||t)&&(e=o(arguments)),h.map(e.slice(),this.getPolygonById,this)},getNodesForPolygon:function(e){return this.polys.hasOwnProperty(e)?h.map(this.polys[e].nodes.slice(),this.getNodeById,this):null},getNumPolygons:function(){return h.size(this.polys)},removePolygons:function(e,t){(!i(e)||t)&&(e=o(arguments));var n=!1;return h.each(e,function(e){this.polys.hasOwnProperty(e)&&(delete this.polys[e],n=!0)},this),n},findPath:function(e,t,n,r){var i,o,u,a,f,l,h,p=[],d={},v=this.getNodeById(e),m=this.getNodeById(t),y=0;for(s(n)||(n=c.distance),s(r)||(r=c.distance),p.push(new g([v],n(v,v)));p.length>0;){o=p.pop(),v=o.last();for(h in v.to)v.to.hasOwnProperty(h)&&(u=this.nodes[h],u&&!o.contains(u)&&(f=o.weight+n(v,u),(d[u.id]||f)>=f&&(d[u.id]=f,l=f+r(u,m),(!i||i.weight>l)&&(a=o.copy(f,l),a.nodes.push(u),u.id===m.id?i=a:p.push(a)))));p.sort(g.prototype.prioratize),y++}return{cycles:y,valid:!!i,nodes:i?i.nodes:[],weight:i?i.weight:0}},findPathWithFewestNodes:function(e,t){var n=function(){return 1};return this.findPath(e,t,n,n)},snapPointToGrid:function(e){var t=null,n=1/0,r=[],i={};return h.each(this.nodes,function(s,o){if(e.id!==o)for(var u in s.to)if(s.to.hasOwnProperty(u)&&!i.hasOwnProperty(u+" "+s.id)){var a=this.nodes[u],f=c.snapPointToLineSegment(e,s,a),l=c.distance(e,f);i[s.id+" "+a.id]=!0,(!t||n>l)&&(t=f,n=l,r[0]=s.id,r[1]=a.id)}},this),{offset:isFinite(n)?n:0,point:t||e,segment:r}},snapPoint:function(e){var t=this.snapPointToGrid(e);return t.point||e},getNearestNodeToNode:function(e){var t=[],n=this.getNodeById(e);return n?(h.each(this.nodes,function(e){e.id!==n.id&&t.push(e)},this),c.getNearestPointToPoint(n,t)):null},getNearestNodeToPoint:function(e){return c.getNearestPointToPoint(e,h.toArray(this.nodes))},hitTestPointInPolygons:function(e){return!!this.getPolygonsOverPoint(e).length},getPolygonsOverPoint:function(e){var t=[];for(var n in this.polys)this.polys.hasOwnProperty(n)&&c.hitTestPointRing(e,this.getNodesForPolygon(n))&&t.push(n);return t},getNodesInPolygon:function(e){var t=[],n=this.getPolygonById(e),r=this.getNodesForPolygon(e),i=c.getRectForPointRing(r);return n&&h.each(this.nodes,function(e){(h.contains(n.nodes,e.id)||c.hitTestRect(e,i)&&c.hitTestPointRing(e,r))&&t.push(e.id)},this),t},getNodesInRect:function(e){var t=[];return h.each(this.nodes,function(n){c.hitTestRect(n,e)&&t.push(n.id)},this),t},getAdjacentPolygonSegments:function(e,t){for(var n=[],r=this.getNodesForPolygon(e),i=this.getNodesForPolygon(t),s=r.length,o=i.length,a=0;s>a;a++)for(var f=r[a].id,l=r[(a+1)%s].id,c=0;o>c;c++){var h=i[c].id,p=i[(c+1)%o].id;u(f,l,h,p)&&n.push([f,l])}return n},getPolygonsWithLineSegment:function(e,t){var n=[];return h.each(this.polys,function(r,i){for(var s=0,o=r.nodes.length;o>s;s++){var a=r.nodes[s],f=r.nodes[(s+1)%o];u(a,f,e,t)&&n.push(i)}}),n},getContiguousNodesMap:function(){function e(t,i){n[t.id]=i[t.id]=1;for(var s in t.to)t.to.hasOwnProperty(s)&&!i.hasOwnProperty(s)&&(i=e(r.getNodeById(s),i));return i}var t=[],n={},r=this;return h.each(this.nodes,function(r){n.hasOwnProperty(r.id)||t.push(e(r,{}))}),t},bridgePoints:function(e,t,n){var r=this.getPolygonsOverPoint(e),i=this.getPolygonsOverPoint(t);if(a(this,e,t,r,i))return[e,t];var s=f(this,e,r),o=f(this,t,i);l(s,o)&&this.joinNodes(s.id,o.id);var u=this.findPath(s.id,o.id);return this.removeNodes(s.id,o.id),u.valid?(u=h.map(u.nodes,function(e){return e.toPoint()}),c.distance(e,s)>1&&u.unshift(e),!n&&c.distance(t,o)>1&&u.push(t),u):[]}},c});